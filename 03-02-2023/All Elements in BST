/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> getAllElements(TreeNode root1, TreeNode root2) {

        List<Integer> arr1 = new ArrayList<>();
        List<Integer> arr2 = new ArrayList<>();
        InOrder(root1, arr1);
        InOrder(root2, arr2);
        return mergeList(arr1, arr2); 
        
    }

    public void InOrder(TreeNode root, List<Integer> l){
        if(root == null) 
            return;
        InOrder(root.left, l);
        l.add(root.val);
        InOrder(root.right, l);
    }

    private List<Integer> mergeList(List<Integer> l1, List<Integer> l2){
        List<Integer> l = new ArrayList();
        int i = 0, j = 0;
        while(i < l1.size() && j < l2.size()){
            if(l1.get(i) < l2.get(j))
                l.add(l1.get(i++));
            else
                l.add(l2.get(j++));
        }
        while(i < l1.size()) l.add(l1.get(i++));
        while(j < l2.size()) l.add(l2.get(j++));

        return l;
    }
}
